{"version":3,"sources":["00-protons/01-grid.scss","00-protons/_02-mixins.scss","../../../node_modules/susy/sass/susy/_su-math.scss","01-atoms/02-typography/01-fonts.scss","01-atoms/01-colors/01-colors.scss","01-atoms/02-typography/02-heading.scss"],"names":[],"mappings":"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","file":"02-heading.css","sourcesContent":["@import \"../../../../node_modules/susy/sass/susy-prefix\";\n@import \"../../../../node_modules/susy/sass/plugins/svg-grid\";\n@import \"02-mixins\";\n\n@mixin media($bp) {\n  @media screen and (min-width: #{$bp}) {\n    @content;\n  }\n}\n\n@mixin media-max($bp) {\n  @media screen and (max-width: #{$bp}) {\n    @content;\n  }\n}\n\n$mobile-screen: 480px;\n$medium-screen: 769px;\n$narrow-screen: 950px;\n$wide-screen: 1220px;\n\n// Basic grid settings.\n$susy: (\n  'columns': susy-repeat(12),\n  'gutters': 14px,\n  'spread': 'narrow',\n  'container-spread': 'narrow'\n);\n\n@mixin sfgov-container-full {\n  @include clearfix;\n  @include media($narrow-screen) {\n    width: 949px;\n    margin: 0 auto;\n    padding: 0;\n  }\n}\n\n@mixin sfgov-container-full--no-padding() {\n  @include clearfix;\n  @include media($narrow-screen) {\n    width: 949px;\n    margin: 0 auto;\n  }\n}\n\n.sfgov-container--full {\n  @include clearfix;\n  @include media($narrow-screen) {\n    width: 949px;\n    margin: 0 auto;\n    padding: 0;\n  }\n}\n\n.sfgov-container {\n  padding-left: susy-gutter() / 2;\n  padding-right: susy-gutter() / 2;\n  @include media($narrow-screen) {\n    width: 949px;\n    margin: 0 auto;\n    padding: 0;\n  }\n}\n\n.sfgov-width-one-whole {\n  width: susy-span(12 of 12);\n}\n\n.sfgov-width-one-half {\n  width: susy-span(6 wide of 12 wide);\n  float: left;\n  @include media($medium-screen) {\n    width: 100%;\n    float: inherit;\n  }\n}\n\n.sfgov-width-one-third {\n  width: susy-span(4 wide of 12 wide);\n  float: left;\n  @include media($medium-screen) {\n    width: 100%;\n    float: inherit;\n  }\n}\n\n.sfgov-width-one-fourth {\n  width: susy-span(3 wide of 12 wide);\n  float: left;\n  @include media($medium-screen) {\n    width: 100%;\n    float: inherit;\n  }\n}\n\n.sfgov-width-one-sixth {\n  width: susy-span(2 wide of 12 wide);\n  float: left;\n  @include media($medium-screen) {\n    width: susy-span(4 wide of 12 wide);\n    float: left;\n  }\n  @include media($mobile-screen) {\n    width: 100%;\n    float: inherit;\n  }\n}\n.sfgov-width-one-twelfth {\n  width: susy-span(1 wide of 12 wide);\n  float: left;\n  @include media($medium-screen) {\n    width: susy-span(4 wide of 12 wide);\n    float: left;\n  }\n  @include media($mobile-screen) {\n    width: 100%;\n    float: inherit;\n  }\n}\n\n.grid-example {\n  color: #fff;\n  .sfgov-grid {\n    background: svg-grid() no-repeat scroll;\n    .sfgov-width-one-whole,\n    .sfgov-width-one-half,\n    .sfgov-width-one-third,\n    .sfgov-width-one-fourth,\n    .sfgov-width-one-sixth,\n    .sfgov-width-one-twelfth {\n      background: #60585c;\n      padding: 10px;\n      text-align: center;\n      border: 1px dotted #e1f3f8;\n    }\n  }\n}\n\n// Grid Two Columns.\n\n.sfgov-grid-two-columns {\n  @include sfgov-container-full--no-padding;\n  padding: 20px 0;\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  @include media($narrow-screen) {\n    grid-template-columns: repeat(2, 1fr);\n    padding: 41px 0 21px 0;\n  }\n  grid-template-rows: auto;\n  grid-gap: 20px 20px;\n  justify-items: stretch;\n  .transaction-card {\n    height: 100%;\n  }\n}\n\n// Right sidebar.\n\n.sfgov-container--right-sidebar {\n  padding: 0;\n  @include media-max($medium-screen) {\n    display: flex;\n    flex-direction: column;\n  }\n  @include media($medium-screen + 1) {\n    padding: 45px 0;\n  }\n  .sfgov-container--content-left {\n    @include media-max($medium-screen) {\n      order: 2;\n    }\n    @include media($medium-screen + 1) {\n      width: susy-span(7.8 narrow of 12 narrow);\n      float: left;\n      @include clearfix;\n    }\n  }\n  .sfgov-container--content-right {\n    @include media-max($medium-screen) {\n      order: 1;\n    }\n    @include media($medium-screen + 1) {\n      width: susy-span(4 narrow of 12 narrow);\n      float: right;\n      @include clearfix;\n      padding: 0;\n    }\n  }\n  .sidebar-block {\n    margin-bottom: 2.6rem;\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n\n}\n\n// Preview.\n.preview {\n  @include clearfix;\n}\n","@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: block;\n  }\n}\n\n@mixin outer-container($local-max-width: $max-width) {\n  @include clearfix;\n  max-width: $local-max-width;\n  margin: {\n    left: auto;\n    right: auto;\n  }\n}\n\n\n// visually-hidden\n//\n// Hide elements visually, but keep them available for screen readers. Don't use\n// this for elements that need to be focusable (e.g. a, button, input, select,\n// textarea). For those, please use `visually-hidden-focusable` instead.\n//\n// Usage: `@include visually-hidden;`\n\n@mixin visually-hidden {\n  & {\n    clip: rect(1px, 1px, 1px, 1px);\n    height: 1px;\n    overflow: hidden;\n    position: absolute !important;\n    width: 1px;\n    word-wrap: normal;\n  }\n}\n\n// visually-hidden-focusable\n//\n// Hide elements visually, but keep them available, and focusable for screen\n// reader and keyboard users.\n//\n// Usage: `@include visually-hidden-focusable;`\n\n@mixin visually-hidden-focusable {\n  &:active,\n  &:focus {\n    clip: auto;\n    height: auto;\n    overflow: visible;\n    position: static !important;\n    width: auto;\n  }\n}\n","/// Grid Math Engine\n/// ================\n/// The `su` functions give you direct access to the math layer,\n/// without any syntax-sugar like shorthand parsing, and normalization.\n/// If you prefer named arguments, and stripped-down syntax,\n/// you can use these functions directly in your code –\n/// replacing `span`, `gutter`, and `slice`.\n///\n/// These functions are also useful\n/// for building mixins or other extensions to Susy.\n/// Apply the Susy syntax to new mixins and functions,\n/// using our \"Plugin Helpers\",\n/// or write your own syntax and pass the normalized results along\n/// to `su` for compilation.\n///\n/// @group su-math\n///\n/// @see su-span\n/// @see su-gutter\n/// @see su-slice\n/// @ignore _su-sum\n/// @ignore _su-calc-span\n/// @ignore _su-calc-sum\n/// @ignore _su-needs-calc-output\n\n\n\n// Su Span\n// -------\n/// Calculates and returns a CSS-ready span width,\n/// based on normalized span and context data –\n/// a low-level version of `susy-span`,\n/// with all of the logic and none of the syntax sugar.\n///\n/// - Grids defined with unitless numbers will return `%` values.\n/// - Grids defined with comparable units\n///   will return a value in the units provided.\n/// - Grids defined with a mix of units,\n///   or a combination of untiless numbers and unit-lengths,\n///   will return a `calc()` string.\n///\n/// @group su-math\n/// @see susy-span\n///\n/// @param {number | list} $span -\n///   Number or list of grid columns to span\n/// @param {list} $columns -\n///   List of columns available\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {0 | 1 | -1} $container-spread [$spread] -\n///   Number of gutters spanned,\n///   relative to `columns` count\n/// @param {integer} $location [1] -\n///   Optional position of sub-span among full set of columns\n///\n/// @return {length} -\n///   Relative or static length of a span on the grid\n@function su-span(\n  $span,\n  $columns,\n  $gutters,\n  $spread,\n  $container-spread: $spread,\n  $location: 1\n) {\n  $span: su-valid-span($span);\n  $columns: su-valid-columns($columns);\n  $gutters: su-valid-gutters($gutters);\n  $spread: su-valid-spread($spread);\n\n  @if (type-of($span) == 'number') {\n    @if (not unitless($span)) {\n      @return $span;\n    }\n\n    $location: su-valid-location($span, $location, $columns);\n    $span: su-slice($span, $columns, $location, $validate: false);\n  }\n\n  @if _su-needs-calc-output($span, $columns, $gutters, $spread, not 'validate') {\n    @return _su-calc-span($span, $columns, $gutters, $spread, $container-spread, not 'validate');\n  }\n\n  $span-width: _su-sum($span, $gutters, $spread, $validate: false);\n\n  @if unitless($span-width) {\n    $container-spread: su-valid-spread($container-spread);\n    $container: _su-sum($columns, $gutters, $container-spread, $validate: false);\n    @return percentage($span-width / $container);\n  }\n\n  @return $span-width;\n}\n\n\n\n// Su Gutter\n// ---------\n/// Calculates and returns a CSS-ready gutter width,\n/// based on normalized grid data –\n/// a low-level version of `susy-gutter`,\n/// with all of the logic and none of the syntax sugar.\n///\n/// - Grids defined with unitless numbers will return `%` values.\n/// - Grids defined with comparable units\n///   will return a value in the units provided.\n/// - Grids defined with a mix of units,\n///   or a combination of untiless numbers and unit-lengths,\n///   will return a `calc()` string.\n///\n/// @group su-math\n/// @see susy-gutter\n///\n/// @param {list} $columns -\n///   List of columns in the grid\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $container-spread -\n///   Number of gutters spanned,\n///   relative to `columns` count\n///\n/// @return {length} -\n///   Relative or static length of one gutter in a grid\n@function su-gutter(\n  $columns,\n  $gutters,\n  $container-spread\n) {\n  @if (type-of($gutters) == 'number') {\n    @if ($gutters == 0) or (not unitless($gutters)) {\n      @return $gutters;\n    }\n  }\n\n  @if _su-needs-calc-output($gutters, $columns, $gutters, -1, not 'validate') {\n    @return _su-calc-span($gutters, $columns, $gutters, -1, $container-spread, not 'validate');\n  }\n\n  $container: _su-sum($columns, $gutters, $container-spread);\n  @return percentage($gutters / $container);\n}\n\n\n\n// Su Slice\n// --------\n/// Returns a list of columns\n/// based on a given span/location slice of the grid –\n/// a low-level version of `susy-slice`,\n/// with all of the logic and none of the syntax sugar.\n///\n/// @group su-math\n/// @see susy-slice\n///\n/// @param {number} $span -\n///   Number of grid columns to span\n/// @param {list} $columns -\n///   List of columns in the grid\n/// @param {number} $location [1] -\n///   Starting index of a span in the list of columns\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {list} -\n///   Subset list of grid columns, based on span and location\n@function su-slice(\n  $span,\n  $columns,\n  $location: 1,\n  $validate: true\n) {\n  @if $validate {\n    $columns: su-valid-columns($columns);\n    $location: su-valid-location($span, $location, $columns);\n  }\n\n  $floor: floor($span);\n  $sub-columns: ();\n\n  @for $i from $location to ($location + $floor) {\n    $sub-columns: append($sub-columns, nth($columns, $i));\n  }\n\n  @if $floor != $span {\n    $remainder: $span - $floor;\n    $column: $location + $floor;\n    $sub-columns: append($sub-columns, nth($columns, $column) * $remainder);\n  }\n\n  @return $sub-columns;\n}\n\n\n\n// Su Sum\n// ------\n/// Get the total sum of column-units in a layout.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {list} $columns -\n///   List of columns in the grid\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `columns` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {number} -\n///   Total sum of column-units in a grid\n@function _su-sum(\n  $columns,\n  $gutters,\n  $spread,\n  $validate: true\n) {\n  @if $validate {\n    $columns: su-valid-span($columns);\n    $gutters: su-valid-gutters($gutters);\n    $spread: su-valid-spread($spread);\n  }\n\n  // Calculate column-sum\n  $column-sum: 0;\n  @each $column in $columns {\n    $column-sum: $column-sum + $column;\n  }\n\n  $gutter-sum: (ceil(length($columns)) + $spread) * $gutters;\n  $total: if(($gutter-sum > 0), $column-sum + $gutter-sum, $column-sum);\n\n  @return $total;\n}\n\n\n\n// Su Calc\n// -------\n/// Return a usable span width as a `calc()` function,\n/// in order to create mixed-unit grids.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {number | list} $span -\n///   Pre-sliced list of grid columns to span\n/// @param {list} $columns -\n///   List of columns available\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {0 | 1 | -1} $container-spread [$spread] -\n///   Number of gutters spanned,\n///   relative to `columns` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {length} -\n///   Relative or static length of a span on the grid\n@function _su-calc-span(\n  $span,\n  $columns,\n  $gutters,\n  $spread,\n  $container-spread: $spread,\n  $validate: true\n) {\n  @if $validate {\n    $span: su-valid-span($span);\n    $columns: su-valid-columns($columns);\n    $gutters: su-valid-gutters($gutters);\n    $spread: su-valid-spread($spread);\n    $container-spread: su-valid-spread($container-spread);\n  }\n\n  // Span and context\n  $span: _su-calc-sum($span, $gutters, $spread, not 'validate');\n  $context: _su-calc-sum($columns, $gutters, $container-spread, not 'validate');\n\n  // Fixed and fluid\n  $fixed-span: map-get($span, 'fixed');\n  $fluid-span: map-get($span, 'fluid');\n  $fixed-context: map-get($context, 'fixed');\n  $fluid-context: map-get($context, 'fluid');\n\n  $calc: '#{$fixed-span}';\n  $fluid-calc: '(100% - #{$fixed-context})';\n\n  // Fluid-values\n  @if (not $fluid-span) {\n    $fluid-calc: null;\n  } @else if ($fluid-span != $fluid-context) {\n    $fluid-span: '* #{$fluid-span}';\n    $fluid-context: if($fluid-context, '/ #{$fluid-context}', '');\n    $fluid-calc: '(#{$fluid-calc $fluid-context $fluid-span})';\n  }\n\n  @if $fluid-calc {\n    $calc: if(($calc != ''), '#{$calc} + ', '');\n    $calc: '#{$calc + $fluid-calc}';\n  }\n\n  @return calc(#{unquote($calc)});\n}\n\n\n\n// Su Calc-Sum\n// -----------\n/// Get the total sum of fixed and fluid column-units\n/// for creating a mixed-unit layout with `calc()` values.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {list} $columns -\n///   List of columns available\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {map} -\n///   Map with `fixed` and `fluid` keys\n///   containing the proper math as strings\n@function _su-calc-sum(\n  $columns,\n  $gutters,\n  $spread,\n  $validate: true\n) {\n  @if $validate {\n    $columns: su-valid-span($columns);\n    $gutters: su-valid-gutters($gutters);\n    $spread: su-valid-spread($spread);\n  }\n\n  $fluid: 0;\n  $fixed: ();\n  $calc: null;\n\n  // Gutters\n  $gutters:  $gutters * (length($columns) + $spread);\n\n  // Columns\n  @each $col in append($columns, $gutters) {\n    @if unitless($col) {\n      $fluid: $fluid + $col;\n    } @else {\n      $fixed: _su-map-add-units($fixed, $col);\n    }\n  }\n\n  // Compile Fixed Units\n  @each $unit, $total in $fixed {\n    @if ($total != (0 * $total)) {\n      $calc: if($calc, '#{$calc} + #{$total}', '#{$total}');\n    }\n  }\n\n  // Calc null or string\n  @if $calc {\n    $calc: if(str-index($calc, '+'), '(#{$calc})', '#{$calc}');\n  }\n\n  // Fluid 0 => null\n  $fluid: if(($fluid == 0), null, $fluid);\n\n\n  // Return map\n  $return: (\n    'fixed': $calc,\n    'fluid': $fluid,\n  );\n\n  @return $return;\n}\n\n\n\n// Needs Calc\n// ----------\n/// Check if `calc()` will be needed in defining a span,\n/// if the necessary units in a grid are not comparable.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {list} $span -\n///   Slice of columns to span\n/// @param {list} $columns -\n///   List of available columns in the grid\n/// @param {number} $gutters -\n///   Width of a gutter\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {bool} -\n///   `True` when units do not match, and `calc()` will be required\n@function _su-needs-calc-output(\n  $span,\n  $columns,\n  $gutters,\n  $spread,\n  $validate: true\n) {\n  @if $validate {\n    $span: su-valid-span($span);\n    $columns: su-valid-columns($columns);\n    $gutters: su-valid-gutters($gutters);\n  }\n\n  $has-gutter: if((length($span) > 1) or ($spread >= 0), true, false);\n  $check: if($has-gutter, append($span, $gutters), $span);\n  $safe-span: _su-is-comparable($check...);\n\n  @if ($safe-span == 'static') {\n    @return false;\n  } @else if (not $safe-span) {\n    @return true;\n  }\n\n  $safe-fluid: _su-is-comparable($gutters, $columns...);\n\n  @return not $safe-fluid;\n}\n","@import \"../../00-protons/01-grid\";\n@import \"../../01-atoms/01-colors/01-colors.scss\";\n\n@mixin source-sans-pro {\n  font-family: \"Source Sans Pro\", sans-serif;\n}\n\n@mixin merriweather {\n  font-family: \"Merriweather\", sans-serif;\n}\n\n@mixin open-sans {\n  font-family: \"Open Sans\", sans-serif;\n}\n\n@mixin montserrat {\n  font-family: \"Montserrat\", sans-serif;\n}\n\n.source-sans-pro {\n  @include source-sans-pro;\n}\n\n.merriweather {\n  @include merriweather;\n}\n\n.open-sans {\n  @include open-sans;\n}\n\n.montserrat {\n  @include montserrat;\n}\n\n.lead-paragraph {\n  @include merriweather;\n  font-size: 20px;\n  line-height: 34px;\n  color: $color-primary-darker;\n}\n\na:visited {\n  color: $color-blue;\n}\n\na:hover {\n  color: $color-blue-darker;\n}\n\n","$color-blue: #0071bc;\n$color-blue-darker: #205493;\n$color-blue-darkest: #112e51;\n$color-aqua: #02bfe7;\n$color-aqua-dark: #00a6d2;\n$color-aqua-darkest: #046b99;\n$color-aqua-light: #9bdaf1;\n$color-aqua-lightest: #e1f3f8;\n$color-red: #e31c3d;\n$color-red-dark: #cd2026;\n$color-red-darkest: #981b1e;\n$color-red-light: #e59393;\n$color-red-lightest: #f9dede;\n$color-white: #ffffff;\n$color-black: #000000;\n$color-black-light: #212121;\n$color-gray-dark: #323a45;\n$color-gray: #5b616b;\n$color-gray-medium: #757575;\n$color-gray-light: #aeb0b5;\n$color-gray-lighter: #d6d7d9;\n$color-gray-lightest: #f1f1f1;\n$color-gray-warm-dark: #494440;\n$color-gray-warm-light: #e4e2e0;\n$color-gray-cool-light: #dce4ef;\n$color-gold: #fdb81e;\n$color-gold-light: #f9c642;\n$color-gold-lighter: #fad980;\n$color-gold-lightest: #fff1d2;\n$color-green: #2e8540;\n$color-green-light: #4aa564;\n$color-green-lighter: #94bfa2;\n$color-green-lightest: #e7f4e4;\n$color-cool-blue: #205493;\n$color-cool-blue-light: #4773aa;\n$color-cool-blue-lighter: #8ba6ca;\n$color-cool-blue-lightest: #dce4ef;\n$color-purple: #4c2c92;\n\n// Functional colors\n$color-primary:              $color-blue !default;\n$color-primary-darker:       $color-blue-darker !default;\n$color-primary-darkest:      $color-blue-darkest !default;\n\n$color-primary-alt:          $color-aqua !default;\n$color-primary-alt-dark:     $color-aqua-dark !default;\n$color-primary-alt-darkest:  $color-aqua-darkest !default;\n$color-primary-alt-light:    $color-aqua-light !default;\n$color-primary-alt-lightest: $color-aqua-lightest !default;\n\n$color-secondary:            $color-red !default;\n$color-secondary-dark:       $color-red-dark !default;\n$color-secondary-darkest:    $color-red-darkest !default;\n$color-secondary-light:      $color-red-light !default;\n$color-secondary-lightest:   $color-red-lightest !default;\n\n$color-base:                 $color-black-light !default;\n$color-focus:                $color-gray-light !default;\n$color-visited:              $color-purple !default;\n\n$color-shadow:               rgba(#000, 0.3) !default;\n$color-transparent:          rgba(#000, 0) !default;\n\n","@import \"01-fonts.scss\";\n@import \"../../00-protons/01-grid\";\n\n// we can place the styles in straight in the folder where the component belongs.\n\n@mixin sfgov-h1 {\n  @include merriweather;\n  margin: 0;\n}\n\nh1 {\n  font-size: 3rem;\n  line-height: 3.9rem;\n  @include sfgov-h1;\n  @include media($medium-screen + 1) {\n    font-size: 4rem;\n    line-height: 5.2rem;\n  }\n}\n\n.sfgov-header-section {\n  color: #FFFFFF;\n  background: #205493;\n  padding: 21px 25px;\n  &.no-margin {\n    margin: 0;\n  }\n  &.big-padding {\n    @include media($narrow-screen) {\n      padding: 16px 0 15px 31px;\n    }\n  }\n}\n\n"]}